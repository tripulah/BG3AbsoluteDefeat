game.actions.statusOverrides.AD_ACTION_ALLY_ASSIST = Action
{
    function()
        local source = GetStatusSource(me, "AD_ACTION_ALLY_ASSIST")
        local ad1 = Dialog("AD_Automated_Ally_Help_02_b46ca98a-0d27-e879-194e-3d2a8ed2d252")
        local ad2 = Dialog("AD_Automated_Ally_Help_01_9ff78be9-e03d-49a3-6562-64eeb8cd651b")
        local randomad = {ad1, ad2}
        if (source ~= nil and GetDistance2DTo(me, source) > 1.5) then
            local moveResult = MoveTo(source, MovementSpeed.Run, true, false, 1.0, 1.5, false)
            if moveResult ~= error.MovementError.None then
                DebugText(me, "Debug: MoveTo failed or run out of resources")
            end

            SteerTo(source)
        elseif (source ~= nil and not source.IsDead and HasActiveStatus(source, "AD_DEFEATED")) then
            SteerTo(source)
            -- assist dialog
            StartAutomatedDialog(randomad[math.random(#randomad)], false, me)
            UseSpell("Target_Help", source, nil, nil, nil, true, true, false, false, true)
            Sleep(3)
            RemoveStatus(me, "AD_ACTION_ALLY_ASSIST", source)
        elseif (source.IsDead) then
            RemoveStatus(me, "AD_ACTION_ALLY_ASSIST")
        end
    end,

    OnLeave = function()
        StopAnimation(me)
        RemoveStatus(me, "AD_ACTION_ALLY_ASSIST")
    end,

    Valid = function(node)
        return
            HasActiveStatus(me, "AD_ACTION_ALLY_ASSIST") and
            not me.IsInCombat
    end
    ,
    Priority = 485555
}

game.actions.statusOverrides.AD_ACTION_CAPTOR_SPARE = Action
{
    function()
        local source = GetStatusSource(me, "AD_ACTION_CAPTOR_SPARE")
        if (source ~= nil and GetDistance2DTo(me, source) > 1.5) then
            local moveResult = MoveTo(source, MovementSpeed.Walk, true, false, 1.0, 1.5, false)
            if moveResult ~= error.MovementError.None then
                DebugText(me, "Debug: MoveTo failed or run out of resources")
            end

            SteerTo(source)
        elseif (source ~= nil and not source.IsDead) then
            local ad1 = Dialog("AD_Automated_Captor_Spare_01_b49ee056-9da9-2435-9e76-9ac94d6ab4be")
            local ad2 = Dialog("AD_Automated_Captor_Spare_02_11e4c422-9cff-9890-eeb5-6a0d76fd6b44")
            local ad3 = Dialog("AD_Automated_Captor_Spare_03_b3b1aaa5-2217-c65b-dc01-796e6bc257ce")
            local ad4 = Dialog("AD_Automated_Captor_Spare_04_ace29225-db95-f408-9d95-b089fd385dc0")
            local randAd = {ad1, ad2, ad3, ad4}
            SteerTo(source)
            StartAutomatedDialog(randAd[math.random(#randAd)], true, me)
            Sleep(2.0)
            RemoveStatus(me, "AD_ACTION_CAPTOR_SPARE")
        end
    end,

    OnLeave = function()
        StopAnimation(me)
        RemoveStatus(me, "AD_ACTION_CAPTOR_SPARE")
    end,

    Valid = function(node)
        return
            HasActiveStatus(me, "AD_ACTION_CAPTOR_SPARE") and
            not me.IsInCombat
    end
    ,
    Priority = 485005
}


game.actions.statusOverrides.AD_ACTION_CAPTOR_KNOCKOUT = Action
{
    function()
        local ad1 = Dialog("AD_Automated_Captor_Leave_01_a9fe3007-41c8-1926-c9a9-7e93ae313975")
        local ad2 = Dialog("AD_Automated_Captor_Leave_02_67dcaa5b-d7aa-4ef2-7062-38d8c0c6482e")
        local ad3 = Dialog("AD_Automated_Captor_Leave_03_c364890c-c94a-1129-aa8c-4dceefbf4001")
        local randad = {ad1, ad2, ad3}
        StartAutomatedDialog(randad[math.random(#randad)], true, me)
        Sleep(4.0)
        RemoveStatus(me, "AD_ACTION_CAPTOR_KNOCKOUT")
    end,

    OnLeave = function()
        StopAnimation(me)
        RemoveStatus(me, "AD_ACTION_CAPTOR_KNOCKOUT")
    end,

    Valid = function(node)
        return
            HasActiveStatus(me, "AD_ACTION_CAPTOR_KNOCKOUT") and
            not me.IsInCombat
    end
    ,
    Priority = 485004
}

game.actions.statusOverrides.AD_ACTION_CAPTOR_LOOT = Action
{
    function()
        local source = GetStatusSource(me, "AD_ACTION_CAPTOR_LOOT")

        local lootInAnimation = Animation("CINE_Kneel_Loot_IN_01_7029be61-5a0a-4d01-8109-5d9c8eeea90e")
        local lootLoopAnimation = Animation("CINE_Kneel_Loot_LOOP_01_cf90b603-1cc2-4846-ae41-747ee41bcaf2")
        local lootOutAnimation = Animation("CINE_Kneel_Loot_OUT_01_8665d057-d060-4e11-88af-bb5ad3ba003c")

        local preLootAD = Dialog("AD_Automated_Captor_PreLoot_01_82de3daa-1958-18a4-0f1f-5246c2ad8b4e")
        local duringLootAD1 = Dialog("AD_Automated_Captor_Loot_01_3787a7c7-5efd-7204-8e7d-3944dc143cb2")
        local duringLootAD2 = Dialog("AD_Automated_Captor_Loot_02_2e511e2e-7c9c-ad1d-b6a4-b8d7b987b62d")
        local duringLootAD3 = Dialog("AD_Automated_Captor_Loot_03_66b5718f-958c-f7f4-a577-4b1135acba94")
        --local postLootAD = Dialog("AD_Automated_Captor_PostLoot_02_2e511e2e-7c9c-ad1d-b6a4-b8d7b987b62d")
        local randomLootAD = {duringLootAD1, duringLootAD2, duringLootAD3}
        if (source ~= nil and GetDistance2DTo(me, source) > 1.5) then
            local moveResult = MoveTo(source, MovementSpeed.Walk, true, false, 1.0, 1.5, false)
            if moveResult ~= error.MovementError.None then
                DebugText(me, "Debug: MoveTo failed or run out of resources")
            end

            SteerTo(source)
        elseif (source ~= nil and not source.IsDead) then
            SteerTo(source)
            -- steal dialog
            StartAutomatedDialog(preLootAD, true, me)
            --Sleep(1.5)
            PlayLoopingAnimation(lootInAnimation, {lootLoopAnimation}, lootOutAnimation)
            Sleep(3)
            for i = 1, 10 do
                if i == 2 then
                    StartAutomatedDialog(randomLootAD[math.random(#randomLootAD)], false, me)
                end
                ApplyStatus(source, "AD_VICTIM_LOOT_ITEM", true, 0, me)
                Sleep(2)
            end
            --WaitForInterrupt()
            StopAnimation(me)
            --StartAutomatedDialog(postLootAD, true, me)
            RemoveStatus(me, "AD_ACTION_CAPTOR_LOOT", source)
        elseif (source.IsDead) then
            RemoveStatus(me, "AD_ACTION_CAPTOR_LOOT")
        end
    end,

    OnLeave = function()
        StopAnimation(me)
        RemoveStatus(me, "AD_ACTION_CAPTOR_LOOT")
    end,

    Valid = function(node)
        return
            HasActiveStatus(me, "AD_ACTION_CAPTOR_LOOT") and
            not me.IsInCombat
    end
    ,
    Priority = 485003
}

game.actions.statusOverrides.AD_ACTION_CAPTOR_TIE = Action
{
    function()
        local source = GetStatusSource(me, "AD_ACTION_CAPTOR_TIE")
        local canAD = true
        local preTieAD1 = Dialog("AD_Automated_Captor_PreTie_01_5ba87109-4fdf-d482-08e9-78510a3a47f3")
        local preTieAD2 = Dialog("AD_Automated_Captor_PreTie_01_924aca28-a01f-23e0-4b06-8e455daf3561")
        local randpretie = {preTieAD1, preTieAD2}
        local postTieAD1 = Dialog("AD_Automated_Captor_PostTie_01_af9eafca-3b2b-76fd-6998-5d0cd493b6d3")
        local postTieAD2 = Dialog("AD_Automated_Captor_PostTie_02_34ad17a1-a55a-918b-e041-e338b2a0b6c9")
        local randposttie = {postTieAD1, postTieAD2}
        --local tieAnimation = Animation()

        if (source ~= nil and GetDistance2DTo(me, source) > 1.5) then
            local moveResult = MoveTo(source, MovementSpeed.Walk, true, false, 1.0, 1.5, false)
            if moveResult ~= error.MovementError.None then
                DebugText(me, "Debug: MoveTo failed or run out of resources")
            end

            SteerTo(source)
        elseif (source ~= nil and not source.IsDead and not HasActiveStatus(source, "AD_RESTRAIN")) then
            SteerTo(source)
            Sleep(0.5)
            StartAutomatedDialog(randpretie[math.random(#randpretie)], false, me)
            Sleep(0.5)
            UseSpell("Target_AD_Restrain", source, nil, nil, nil, true, true, false, false, true)
        elseif (source ~= nil and HasActiveStatus(source, "AD_RESTRAIN")) then
            StartAutomatedDialog(randposttie[math.random(#randposttie)], true, me)
            RemoveStatus(me, "AD_ACTION_CAPTOR_TIE", source)
        elseif (source ~= nil and source.IsDead) then
            StartAutomatedDialog(randposttie[math.random(#randposttie)], true, me)
            RemoveStatus(me, "AD_ACTION_CAPTOR_TIE", source)
        end
    end,
    Valid = function(node)
        return
            HasActiveStatus(me, "AD_ACTION_CAPTOR_TIE") and
            not me.IsInCombat
    end
    ,
    OnLeave = function()
        RemoveStatus(me, "AD_ACTION_CAPTOR_TIE")
    end,
    Priority = 485002
}

game.actions.statusOverrides.AD_ACTION_CAPTOR_BYSTANDER = Action
{
    function()
        local source = GetStatusSource(me, "AD_ACTION_CAPTOR_BYSTANDER")
        local cheerAnimation = Animation("CINE_Cheer_VictoriousFist_a2fba9da-dae8-4bd9-8a31-6de79f6a6422")
        local clapAnimation = Animation("CINE_Cheer_AgreeClap_01_8775cd9a-9d7c-408b-aa4b-6a557f71e353")
        local laughAnimation = Animation("CINE_Laugh_01_3b854156-3588-4178-acd7-e7aa6fda1fae")
        local randomAnims = {cheerAnimation, clapAnimation, laughAnimation}

        local ad1 = Dialog("AD_Automated_Captor_Taunt_01_689d12a5-7264-916d-aa53-f60d20a9b971")
        local ad2 = Dialog("AD_Automated_captor_Taunt_02_bc0f2276-0262-dff1-7701-4436579f970f")
        local ad3 = Dialog("AD_Automated_captor_Taunt_03_be439f77-fe9b-1cb0-bc6f-a67f9a3cb09d")
        local ad4 = Dialog("AD_Automated_captor_Taunt_04_34ef2099-8d09-dd76-47df-6168d3bd8799")
        local randomAD = {ad1, ad2, ad3, ad4}

        if (source ~= nil and GetDistance2DTo(me, source) > 3.5) then
            local moveResult = MoveTo(source, MovementSpeed.Walk, false, false, 1.0, 1.5, false)
            if moveResult ~= error.MovementError.None then
                DebugText(me, "Debug: MoveTo failed or run out of resources")
            end
        elseif (source ~= nil and not source.IsDead) then
            SteerTo(source)
            local randomAnim = randomAnims[math.random(#randomAnims)]
            if math.random() < 0.5 and not IsInDialog(me, false) then
                StartAutomatedDialog(randomAD[math.random(#randomAD)], false, me)
            end
            PlayAnimation(randomAnim)
            -- if me.CanSpeak and not IsInDialog(me, false) then
            --     StartCheckedAutomatedDialogRateLimitedImmediate(randomAD[math.random(#randomAD)], 1.0 + math.random() * 30, 20.0, false, me) 
            -- end
            Sleep(math.random(4,12))
        end
    end,

    OnLeave = function()
        StopAnimation(me)
    end,

    Valid = function(node)
        return
            HasActiveStatus(me, "AD_ACTION_CAPTOR_BYSTANDER") and
            not HasActiveStatus(me, "AD_ACTION_CAPTOR_LOOT") and
            not HasActiveStatus(me, "AD_ACTION_CAPTOR_TIE") and
            not HasActiveStatus(me, "AD_ACTION_CAPTOR_KNOCKOUT") and
            not me.IsInCombat
    end
    ,
    Priority = 485001
}